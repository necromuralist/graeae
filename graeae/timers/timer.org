#+TITLE: Timer

   This emits an elapsed time and says a message when the =end= is called. It uses [[https://pyttsx3.readthedocs.io/en/latest/][python text-to-speech]] to say the message.
   Since there are certain code-blocks that take a long time to run I found myself timing everything to see how long things take. This is meant to make it a little easier. But, of course it doesn't, really. Running this on paperspace crashes since I don't want to install espeak on it just to work around it so I'm going to have to do some hacking. The big problem is that the type-hinting will crash it.
#+BEGIN_SRC python :exports none :tangle timer.py
<<timer-imports>>


<<espeak-hack>>


<<timer>>
#+END_SRC

#+BEGIN_SRC python :noweb-ref timer-imports
from datetime import datetime
try:
    import pyttsx3
    SPEAKABLE = True
except ImportError:
    print("pyttsx3 not available")
    SPEAKABLE = False
#+END_SRC

#+BEGIN_SRC python :noweb-ref espeak-hack
if not SPEAKABLE:
    class EngineMock:
        """A fake engine"""

    class pyttsx3:
        """A fake module"""
        engine = EngineMock
        engine.Engine = None
#+END_SRC

#+BEGIN_SRC ipython :session dog :results none :noweb-ref timer
class Timer:
    """Emits the time between calling start and end

    Args:
     speak: If true, say something at the end
     message: what to say
     emit: if False, just stores the times 
    """
    def __init__(self, beep: bool=True, message: str="All Done",
                 emit:bool=True) -> None:
        self.beep = beep
        self.message = message
        self.emit = emit
        self._speaker = None
        self.started = None
        self.ended = None
        return

    @property
    def speaker(self) -> pyttsx3.engine.Engine:
        """The espeak speaker"""
        if self._speaker is None:
            self._speaker = pyttsx3.init()
        return self._speaker

    def start(self) -> None:
        """Sets the started time"""
        self.started = datetime.now()
        if self.emit:
            print("Started: {}".format(self.started))
        return

    def end(self) -> None:
        """Emits the end and elapsed time"""
        self.ended = datetime.now()
        if self.emit:
            print("Ended: {}".format(self.ended))
            print("Elapsed: {}".format(self.ended - self.started))
        if SPEAKABLE and self.beep:
            self.speaker.say(self.message)
            self.speaker.runAndWait()
        return

    stop = end

    def __enter__(self):
        """Starts the timer"""
        self.start()
        return self

    def __exit__(self, type, value, traceback) -> None:
        """Stops the timer"""
        self.end()
        return
#+END_SRC

