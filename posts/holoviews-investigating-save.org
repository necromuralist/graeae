#+BEGIN_COMMENT
.. title: Holoviews: Investigating Save
.. slug: holoviews-investigating-save
.. date: 2024-03-28 17:27:47 UTC-07:00
.. tags: holoviews,exploration
.. category: Exploration
.. link: 
.. description: Exploring what holoviews.save does.
.. type: text

#+END_COMMENT
#+OPTIONS: ^:{}
#+TOC: headlines 1
#+PROPERTY: header-args :session ~/.local/share/jupyter/runtime/kernel-f4f3eb79-1b65-4d3d-ba79-18646a70d0d4-ssh.json

#+BEGIN_SRC python :results none :exports none
%load_ext autoreload
%autoreload 2
#+END_SRC

* Starting

#+begin_src python :results none
import hvplot.pandas
import pandas
#+end_src

#+begin_src python :results none
data = pandas.DataFrame(dict(a=[3, 4],b=[5, 6]))
plot = data.hvplot()
#+end_src
* Holoviews Save

#+begin_src python :results none
# pypi
import holoviews
#+end_src

#+begin_src python :results output :exports both
print(holoviews.save.__module__)
#+end_src

#+RESULTS:
: holoviews.util

#+begin_src python :results output :exports both
print(holoviews.util.save.__doc__)
#+end_src

#+RESULTS:
#+begin_example

    Saves the supplied object to file.

    The available output formats depend on the backend being used. By
    default and if the filename is a string the output format will be
    inferred from the file extension. Otherwise an explicit format
    will need to be specified. For ambiguous file extensions such as
    html it may be necessary to specify an explicit fmt to override
    the default, e.g. in the case of 'html' output the widgets will
    default to fmt='widgets', which may be changed to scrubber widgets
    using fmt='scrubber'.

    Arguments
    ---------
    obj: HoloViews object
        The HoloViews object to save to file
    filename: string or IO object
        The filename or BytesIO/StringIO object to save to
    fmt: string
        The format to save the object as, e.g. png, svg, html, or gif
        and if widgets are desired either 'widgets' or 'scrubber'
    backend: string
        A valid HoloViews rendering backend, e.g. bokeh or matplotlib
    resources: string or bokeh.resource.Resources
        Bokeh resources used to load bokehJS components. Defaults to
        CDN, to embed resources inline for offline usage use 'inline'
        or bokeh.resources.INLINE.
    toolbar: bool or None
        Whether to include toolbars in the exported plot. If None,
        display the toolbar unless fmt is `png` and backend is `bokeh`.
        If `True`, always include the toolbar.  If `False`, do not include the
        toolbar.
    title: string
        Custom title for exported HTML file
    ,**kwargs: dict
        Additional keyword arguments passed to the renderer,
        e.g. fps for animations
#+end_example

Looking at the code (defined in ~holoviews.util.__init__~) it uses another function defined in the same ~__init__~ file as ~save~ called ~renderer~ to get a renderer by using what looks like a dictionary: ~Store.renderers[name]~. ~Store~ is being imported from ~..core~.

* BokehRenderer

The bokeh renderer appears to be set in ~holoviews.plotting.bokeh.__init__.py~:

#+begin_src python
Store.renderers["bokeh"] = BokehRenderer.instance()
#+end_src


The ~BokehRenderer~ is defined in ~holoviews.plotting.bokeh.renderer.py~.
